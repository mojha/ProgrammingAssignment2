x<-(-2*pi:2*pi)
plot(sin(x))
x<-(-2*pi:2*pi,100)
x<-c(-2*pi:2*pi,100)
plot(sin(x))
x
x<-(c(-2*pi:2*pi),100)
x<- ((-2*pi:2*pi),100)
x<- (c(-2*pi:2*pi),100)
x<-c ((-2*pi:2*pi),100)
x
x<-c[-2*pi:2*pi]
x
x<-[-2*pi:2*pi]
x<-c([-2*pi:2*pi])
x<-2*pi:2*pi
x
x<-c(2*pi:2*pi),100
x<-(c(2*pi:2*pi),100)
x<-(c(2*pi:2*pi),length=100)
vector?
q
x<-seq(-2*pi,2*pi,length.out=100)
x
plot(sin(x))
replot(cos(x))
plot(cos(x))
plot(cos(x),sin(x))
plot(cos^2(x),sin^2(x))
plot(cos(x)*cos(x),sin(x)*sin(x))
plot(cos(x),sin(x)*sin(x))
plot(cos(x)*sin(x),sin(x)*sin(x))
plot(cos(x)
q
plot(cos(x))
?plot
plot(sin, -pi, 2*pi)
plot(sin, -2*pi, 2*pi)
plot(sin, -3*pi, 3*pi)
plot(tan, -3*pi, 3*pi)
plot(cos, -3*pi, 3*pi)
?plot
plot(cos, -3*pi, 3*pi,'lr')
plot(cos, -3*pi, 3*pi,type='lr')
plot(cos, -3*pi, 3*pi,type='l')
plot(cos, -3*pi, 3*pi,t='l')
?plot
plot(cos, -3*pi, 3*pi,'l')
plot(cos, -3*pi, 3*pi,type 'l')
plot(cos, -3*pi, 3*pi,type="lp")
plot(cos, -3*pi, 3*pi,type="lp")
theURl<-"http://jaredlander.com/data/Tomato%20First.csv"
theURl<-"http://jaredlander.com/data/Tomato%20First.csv"
tomto<-read.table(file=theURl,header=TRUE,sep=",")
tomato
head(tomato)
tomato<-read.table(file=theURl,header=TRUE,sep=",")
tomato
head(tomato)
tail(tomato)
head(tomato)
head(tomato)
tomato<-read.table(file=theURl,header=TRUE,sep=",")
head(tomato)
tail(tomato)
install.packages("darts")
source('~/Documents/statistics-36-350/week-1/darts.R', encoding = 'UTF-8')
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("KernSmooth")
plot(sin, -3*pi, 3*pi)
plot(cos^2(x),sin^2(x))
clearPushBack()
plot(sin, -3*pi, 3*pi)
plot(cos, -3*pi, 3*pi,type='lr')
plot(cos, -3*pi, 3*pi,type='l')
replot(sin, -3*pi, 3*pi,type='l')
plot(sin, -3*pi, 3*pi,type='l')
plot(sin,cos, -3*pi, 3*pi,type='l')
plot(sin,cos, -3*pi, 3*pi,type='l')
x=seq(-2*pi,2*pi,0.01)
y1=sin(x)
y2=cos(x)
plot(x,y1,type='l')
plot(x,y2,type='l')
lines(x,y2)
x=seq(-3*pi,3*pi,0.01)
y=sin(x)
plot(x,y,type='l')
getwd
getwd()
getwd()
count<-0
while(count<10){}
cube<-function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(i in x > 5) {
x <- 0
}
x<-1:10
x
type(x)
class(x)
cx
x
x<-1:10
if(x>5)
print("Hello")
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
id=1:10
id
id1[1]
id[1]
id[length[id]]
id[length(id)]
x<-list(a=1:5, b=rnorm(10))
x
x$a
x$b
mean(x$a)
mean(x$b)
b<-lapply(x,mean)
b
b<-lapply(x,sum)
b
x<list(a=1:4,b=rnprm(10),c=rnorm(20,1),d=rnorm(100,5))
x<list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x
lapply(x,mean)
runif
help(runif)
x<-1:4
runif(x)
lapply(x,runif)
lapply(x,runif,min=0,max=10)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
x$a
x$b
x$a[,1]
x$b[,1]
x$b[1,]
x$b[,2]
x$a[,2]
x$a[1,]
x$a[2,]
x$b[1,]
x$b[2,]
x$b[3,]
lapply(x,function(man),man[,1])
lapply(x,function(elt),elt[,1])
lapply(x,function(elt) elt[,1])
lapply(x,function(man) man[,1])
lapply(x,function(man) man[,2])
lapply(x,function(man) man[1,])
lapply(x,function(man) man[2,])
lapply(x,function(man) man[3,])
lapply(x,function(man) man[2,])
lapply(x,function(man) man[,1])
lapply(x,function(man) man[,2])
lapply(x,function(man) man[,1])
lapply(x,function(man) man[,2])
sapply(x,function(man) man[,2])
x<-list(a=matrix(1:6,3,2),b=matrix(7:12,3,2))
x
sapply(x,function(man) man[,2])
sapply(x,function(man) man[,1])
x1<-list(a=1:4,b=rnorm(10,c=rnorm(20,1),d=rnorm(100,5))
x1
x1<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x1
lapply(x1,mean)
xapply(x1,mean)
sapply(x1,mean)
x<-matrix(rnorm(200),20,10)
x
x
apply(x,2,mean)
apply(x,1,sum)
apply(x,2,sum)
colSums=apply(x,2,sum)
colSums
colMeans=apply(x,2,mean)
colMeans
rowSums(x)
colSums(x)
colMeans(x)
x<-matrix(rnorm(200),20,10)
x
RowSums(x)
RowSum(x)
rowSum(x)
rowSums(x)
colSums(x)
colMeans(x)
rowMeans(x)
x<-list(rep(1,4))
x
x<-list(rep(2,3))
x
x<-list(rep(3,2))
x
x<-list(rep(4,1))
x<-mapply(rep,1:4,4:1)
x
x<-mapply(rep,1:100,100:1)
x
x<-mapply(rep,1:100,100:1)
x
x
x<-mapply(rep,1:50,50:1)
x
x<-mapply(rep,1:10 ,10:1)
x
x<-mapply(rep,1:50 ,50:1)
x
x<-mapply(rep,1:9 ,9:1)
x
x<-matrix(a=1:12,nrows=3,ncol = 4)
x<-matrix(a=1:12,nrows=3)
x<-matrix(1:12,nrows=3)
x<-matrix(1:12,3,4
x
x<-matrix(1:12,3,4)
x
y<-apply(x,2,sum)
y
y<-apply(x,1,sum)
y
theMatrix<-matrix(1:9,nrow=3)
theMatrix
apply(theMatrix,1,sum)
apply(theMatrix,2,sum)
rowSum(theMatrix)
rowSums(theMatrix)
colSums(theMatrix)
theMatrix[2,1]<-NA
theMatrix
apply(theMatrix,1,sum,na.rm=TRUE)
apply(theMatrix,2,sum,na.rm=TRUE)
colSums(theMatrix,na.rm=TRUE)
rowSums(theMatrix,na.rm=TRUE)
theList<-list(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList
lapply(theList,sum)
sapply(theList,sum)
theNames<-c("Jared","Deb","Paul")
theNames
lapply(theNames)
lapply(theNames,nchar)
sapply(theNames,nchar)
lapply
x<-list(a=1:5,b=rnorm(10))
x
x$a
x$b
mean(x$b)
mean(x$a)
mean(x$b)
sum(x$b)
sum(x$a)
lapply(x,mean)
lapply(x,sum)
sapply(x,sum)
sapply(x,mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x
sapply(x,mean)
sapply(x, sum)
x<-1:4
lapply(x, runif)
x<-1:4
lapply(x,runif,min=0,max=10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
lapply(x, function(man) {man[,1]})
lapply(x, function(man) {man[,2]})
x<-matrix(rnorm(200),20,10)
x
apply(x,1,sum)
apply(x,1,mean)
apply(x,2,mean)
rowSums(x)
colSums(x)
colMeans(x)
rowMeans(x)
x
apply(x,1,quantile,probs=c(0.25.0.75))
apply(x,1,quantile,probs = c(0.25.0.75))
apply(x,1,quantile,probs = c(0.25, 0.75))
apply(x,2,quantile,probs = c(0.25, 0.75))
y<-apply(x,1,quantile,probs = c(0.25, 0.75))
y
y<-apply(x,2,quantile,probs = c(0.25, 0.75))
y
a<-array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,sum)
tapply(x,f,sum,simplify=FALSE)
tapply(x,f,sum,simplify=TRUE)
tapply(x,f,range,simplify=TRUE)
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
split(x,f)
lapply(split(x,f), mean)
lapply(split(x,f), sum)
lapply(split(x,f), range)
log(-1)
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
s
lapply(s,function(x), colMeans(x[,c("Ozone","Solar.R,"Wind)]))
lapply(s,function(x){ colMeans(x[,c("Ozone","Solar.R,"Wind)]))})
lapply(s, function(x) {    + colMeans(x[, c("Ozone", "Solar.R", "Wind")])    + })
lapply(s, function(x) { colMeans(x[, c("Ozone", "Solar.R", "Wind")]) })
sapply(s, function(x) { colMeans(x[, c("Ozone", "Solar.R", "Wind")]) })
sapply(s, function(x) { colMeans(x[, c("Ozone", "Solar.R", "Wind")]) },na.rm=TRUE)
sapply(s, function(x) { colMeans(x[, c("Ozone", "Solar.R", "Wind")], ,na.rm=TRUE) })
library(datasets)
data(iris)
?iris
iris
sapply(iris,mean)
sapply(iris,mean,nq.rm=TRUE)
sapply(iris,mean,na.rm=TRUE)
sapply(iris[,1],mean)
sapply(iris,mean)
sapply(iris,2, mean)
apply(iris,2, mean)
colMeans(iris)
apply(iris[,1:4],mean)
apply(iris[,1:4],2, mean)
apply(iris[,1:4],1, mean)
apply(iris,1, mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],1, mean)
apply(iris[,1:4],2, mean)
apply(iris[,1:4],1, mean, iris$Species='virginica')
iris$Species='virginica'
exit
exit()
data(iris)
iris
apply(iris[,1:4],1, mean, Species='virginica')
sapply(iris[,1:4],1, mean, Species='virginica')
sapply(iris[,1:4],2, mean, Species='virginica')
sapply(iris[,1:4],2, mean)
apply(iris[,1:4],2, mean)
iris$Species
if(iris$Species='virginica'){apply(iris[,1:4],2, mean)}
iris$Species
x<-iris$Species='virginica'
x<-iris$Species=='virginica'
x
apply(iris[,1:4],2, mean, iris$Species=='virginica')
apply(iris[,1:4],2, mean)
mean($iris$Sepal.Length)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length,iris$Species=='virginica')
mean()
mean()
mean
iris
iris$Species
mean(iris$Sepal.Length[iris$Species=="virginica"])
apply(iris[,1:4],2, mean,iris[Species=='virginica'])
apply(iris[,1:4],2, mean)
apply(iris[,1:4],2, mean,iris[Species=='virginica'])
iris
apply(iris[,1:4],2, mean)
apply(iris[,1:4,Species=="virginica"],2, mean)
apply(iris[,1:4],2, mean)
iris
for (sp in iris$Species) {print sp}
for (sp in iris$Species) {print (sp)}
for (sp in iris$Species) {if (sp=='virginica') apply(iris[,1:4],2, mean) }
y<- for (sp in iris$Species) {if (sp=='virginica') apply(iris[,1:4],2, mean) }
y
y<- for (sp in iris$Species) {if (sp=='virginica') print(iris[,1:4]) }
y<- for (sp in iris$Species) {if (sp=='virginica') print(iris[,1:4]) }
y
y<- for (sp in iris$Species) {if (sp=='virginica') iris[,1:4] }
y
for (sp in iris$Species) {if (sp=='virginica') print(apply(iris[,1:4],2, mean)) }
y<-iris[iris$pecies=='virginica']
y
y<-iris, [iris$pecies=='virginica']
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
with(mtcars,tapply(mpg,cyl,mean))
lapply(mtcars, mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)4.
with(iris, tapply(Sepal.Length,Species, mean))
round()
round
round(6.588)
sapply(split(iris$Sepal.Length,iris$Species),mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
abs(26.66364-15.10000)
round(11.56364)
round(6.588)
debug(ls)
ls
ls
ls
ls()
ls
debug(ls)
ls()
library(datasets)
data(mtcars)
mean($mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
round(abs( 82.63636-209.21429))
tapply(mtcars$cyl,mtcars$mpg, mean)
apply(iris[,1:4],2,mean)
setwd("~/Documents/git_files_and_folders/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
my_matrix<-makeCacheMatrx(matrix(1:4,2,2))
source("cachematrix.R")
source("cachematrix.R")
ls()
my_matrix<-makeCacheMatrix(matrix(1:4),2,2)
my_matrix<-makeCacheMatrix(matrix(1:4),2,2))
my_matrix<-makeCacheMatrix(matrix(1:4,2,2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$setInverse()
my_matrix$getInverse()
source("cachematrix.R")
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getInverse()
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
my_matrix<-makeCacheMatrix(matrix(1:4),2,2)
my_matrix<-makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$get()
